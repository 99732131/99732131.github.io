<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://99732131.github.io</id>
    <title>Gridea</title>
    <updated>2020-09-11T08:48:58.597Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://99732131.github.io"/>
    <link rel="self" href="https://99732131.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://99732131.github.io/images/avatar.png</logo>
    <icon>https://99732131.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[通用后台管理任务2-基础模块公共组件]]></title>
        <id>https://99732131.github.io/post/tong-yong-hou-tai-guan-li-ren-wu-2-ji-chu-mo-kuai-gong-gong-zu-jian/</id>
        <link href="https://99732131.github.io/post/tong-yong-hou-tai-guan-li-ren-wu-2-ji-chu-mo-kuai-gong-gong-zu-jian/">
        </link>
        <updated>2020-09-11T08:32:17.000Z</updated>
        <content type="html"><![CDATA[<p>知识介绍	<br>
对于项目开发中，常量和公共变量的使用是必不可少的。为了达到统一设置和管理会对项目所有模块会使用的数据进行全局定义和设置。在管理系统中系统管理员是一个很重要的角色，它在系统初始完成就会存在，所以会预先设定相关数据。当然，我们还会预先将一些为了扩展而提前定义的数据，比如为今后搭建微服务为每个应用服务设定唯一对应的名称等。<br>
接口常量与类常量的主要不同在于性能上，由于类常量拥有类的特性在JVM加载时会进行类相关的检查，而接口会直接加载。所以开发中要根据数据使用的不同来选择不同的定义方式。<br>
约定优于配置（convention over configuration），也称作按约定编程，是一种软件设计范式，旨在减少软件开发人员需做决定的数量，获得简单的好处，而又不失灵活性。在SpringBoot中，约定优于配置可以从以下两个方面来理解：<br>
（1）开发人员仅需规定应用中不符合约定的部分；<br>
（2）在没有规定配置的地方，采用默认配置，以简化配置为核心思想。<br>
总的来说，上面两条都遵循了推荐默认配置的思想。当存在特殊需求的时候，自定义配置即可。这样可以大大的减少配置工作，这就是所谓的“约定”。</p>
<p>第一步、创建接口常量类Const，设定系统管理员相关常量参数，在系统初始化时指定系统管理员固有数据与其他用户的区别；<br>
<img src="https://99732131.github.io/post-images/1599813321002.PNG" alt="" loading="lazy"></p>
<pre><code>package com.common.platform.base.config.sys;
/**
 * 系统常量
         */
public interface Const {

       /**
        * 管理员角色的名字
        */
        String ADMIN_NAME = &quot;administrator&quot;;
  /**
         * 管理员id
         */
        Long ADMIN_ID = 1L;
        /**
         * 超级管理员角色id
         */
         Long ADMIN_ROLE_ID = 1L;
}
</code></pre>
<p>第二步、创建常量类DefaultAvatar，设定公共系统默认头像常量参数，以便系统在用户未设定头像时使用默认头像（对BASE64编码转码有问题的可以去https://blog.csdn.net/qq_41712834/article/details/100652676这个网址看看）。<br>
<img src="https://99732131.github.io/post-images/1599813727550.PNG" alt="" loading="lazy"></p>
<pre><code>package com.common.platform.base.config.sys;
/*
* 默认的头像Base64编码
* */
public class DefaultAvatar {
    public static final String BASE_64_AVATAR = &quot;/9j/4AAQSkZJRgABAQEASABIAAD/4Q/1RXhpZgAASUkqAAgAAAACADIBAgAUAAAAJgAAAGmHBAABAAAAOgAAAEAAAAAyMDE1OjA1OjA2IDEzOjE5OjAyAAAAAAAAAAMAAwEEAAEAAAAGAAAAAQIEAAEAAABqAAAAAgIEAAEAAACDDwAAAAAAAP/Y/+AAEEpGSUYAAQEAAAEAAQAA/9sAQwAGBAUGBQQGBgUG&quot;;
}
</code></pre>
<p>第三步、创建应用名称参数类AppNameProperties，以便系统其他方法获取和设定应用名称；<br>
<img src="https://99732131.github.io/post-images/1599813776344.PNG" alt="" loading="lazy"></p>
<pre><code>package com.common.platform.base.config.app;
import lombok.Data;
/*
* 应用名称
* */
@Data
public class AppNameProperties {
    private String name;
}
</code></pre>
<p>第四步、创建公共状态枚举类CommonStatus，此类定义了功能启动状态的信息数据；<br>
<img src="https://99732131.github.io/post-images/1599813882718.PNG" alt="" loading="lazy"></p>
<pre><code>package com.common.platform.base.enums;
import lombok.Getter;
import javax.sql.CommonDataSource;
@Getter
public enum CommonStatus {
    ENABLE(&quot;ENABLE&quot;,&quot;启用&quot;),DISABLE(&quot;DISABLE&quot;,&quot;禁用&quot;);
    String code;
    String message;
    CommonStatus(String code,String message){
        this.code=code;
        this.message=message;
    }
    public static String getDescription(String status){
        if (status==null){
            return &quot;&quot;;
        }else {
            for (CommonStatus s:CommonStatus.values()){
                if (status.equals(s.code)){
                    return s.getMessage();
                }
            }
        }
        return &quot;&quot;;
    }
}
</code></pre>
<p>第五步、创建公共是否状态枚举类YesOrNotEnum，此类定义了数据是否状态的信息数据；<br>
<img src="https://99732131.github.io/post-images/1599813969945.PNG" alt="" loading="lazy"></p>
<pre><code>package com.common.platform.base.enums;

import lombok.Getter;

@Getter
public enum YesOrNotEnum {

    Y(true,&quot;是&quot;,1),N(false,&quot;否&quot;,0);

    private Boolean flag;
    private String desc;
    private Integer code;

    YesOrNotEnum(Boolean flag, String desc, Integer code){
        this.flag=flag;
        this.desc=desc;
        this.code=code;
    }

    public static final String valueOf(Integer status){
     if (status==null){
         return &quot;&quot;;
     }else {
         for (YesOrNotEnum s:YesOrNotEnum.values()){
             if ((status.equals(s.getCode()))){
                 return s.getDesc();
             }
         }
     }
     return &quot;&quot;;
    }
}
</code></pre>
<p>到此，通用后台管理的基础模块公共组件开发完成</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[通用后台管理任务1.1-搭建聚合工程]]></title>
        <id>https://99732131.github.io/post/tong-yong-hou-tai-guan-li-ren-wu-11-da-jian-ju-he-gong-cheng/</id>
        <link href="https://99732131.github.io/post/tong-yong-hou-tai-guan-li-ren-wu-11-da-jian-ju-he-gong-cheng/">
        </link>
        <updated>2020-09-10T03:57:53.000Z</updated>
        <content type="html"><![CDATA[<p>（1）使用IntelliJ IDEA创建聚合工程；</p>
<p>（2）了解pom.xml文件结构和常用项；</p>
<p>知识介绍：<br>
正所谓工欲善其事，必先利其器，拥有得心应手的编辑器就好比如鱼得水，在万行代码中取bug首级就如观鱼赏花！IntelliJ IDEA就堪称是当世之神兵，自诩为最智能的编辑器。<br>
POM是项目对象模型(Project Object Model)的简称,它是Maven项目中的文件，使用XML表示，名称叫做pom.xml。作用类似ant的build.xml文件，功能更强大。该文件用于管理：源代码、配置文件、开发者的信息和角色、问题追踪系统、组织信息、项目授权、项目的url、项目的依赖关系等等。事实上，在Maven世界中，project可以什么都没有，甚至没有代码，但是必须包含pom.xml文件。注意，其中的modelVersion是4.0.0，这是当前仅有的可以被Maven2&amp;3同时支持的POM版本，它是必须的。 以下为常用标签：</p>
<pre><code>&lt;parent&gt;属性类似于java中的父子类继承关系，子类可以引用父类中非private的变量和方法，Maven中
的parent定义是类似的，继承者可以直接使用parent中的maven depandencies。
&lt;properties&gt;属性是值占位符，如Ant中的属性。它们的值可以通过使用符号${X}在POM中的任何位置访
问，其中X是属性。
&lt;dependencies&gt;属性是依赖应用。其中每个依赖由&lt;dependency&gt;属性。
&lt;build&gt;属性是构建配置。描述了如何来编译及打包项目，而具体的编译和打包工作是通过build中配置的 
plugin 来完成的。当然plugin配置不是必须的。一种&lt;build&gt;被称为Project Build，即是
&lt;project&gt;的直接子元素。另一种&lt;build&gt;被称为Profile Build，即是&lt;profile&gt;的直接子元素。
&lt;resources&gt;属性 是项目相关的所有资源路径列表，例如和项目相关的配置文件、属性文件，这些资源被
包含在最终的打包文件里。
</code></pre>
<p>项目关系:<br>
<img src="https://99732131.github.io/post-images/1599710625595.PNG" alt="" loading="lazy"></p>
<p>任务1.2：建立工程：<br>
第一步、启动IntelliJ IDEA；</p>
<p>第二步、建立Maven主项目；<br>
JDK版本要选择1.8以上！<br>
<img src="https://99732131.github.io/post-images/1599710932185.PNG" alt="" loading="lazy"><br>
第三步、填写主项目名称、保存路径和坐标；<br>
项目名和项目坐标要自定义，保存路径要选择非系统盘！<br>
<img src="https://99732131.github.io/post-images/1599710938210.PNG" alt="" loading="lazy"><br>
第四步、建立主项目的Maven子模块<br>
(supper-支撑模块，base-基础模块，auth-权限模块,sys-系统模块,main-应用模块)：<br>
首先，在主项目名点击【右键】，选择【New】，在【New】中选择【Module】；<br>
选择建立Maven模块，填写支撑模块的名称、保存路径和坐标（注意所属父项目）；<br>
<img src="https://99732131.github.io/post-images/1599711247850.PNG" alt="" loading="lazy"><br>
建立完成后是这样的（右下角有蓝色小方块就是附属maven子模块 ）：<br>
<img src="https://99732131.github.io/post-images/1599725979813.PNG" alt="" loading="lazy"></p>
<p>任务1.2：配置工程</p>
<p>第一步、配置主项目的pom.xml文件：</p>
<pre><code> &lt;!--  设定主项目为SpringBoot项目 --&gt;
&lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;
    &lt;/parent&gt;
    &lt;!--  项目基本信息配置 --&gt;
    &lt;name&gt;通用后台管理系统&lt;/name&gt;
    &lt;description&gt;快速搭建开发平台&lt;/description&gt;

&lt;!--  项目编码及JDK版本配置 --&gt;
    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;

  &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 --&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.8.1&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;source&gt;${java.version}&lt;/source&gt;
                    &lt;target&gt;${java.version}&lt;/target&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;!--  把源代码中的文件，打包到相应位置。这里指定以@包含的变量指定的文件 --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
       &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                    &lt;delimiters&gt;
                        &lt;delimiter&gt;@&lt;/delimiter&gt;
                    &lt;/delimiters&gt;
                    &lt;useDefaultDelimiters&gt;false&lt;/useDefaultDelimiters&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
        &lt;!--  指定需要打包的文件和过滤的文件目录。这里指定将mapper的xml打包；指定web目录不过滤；指定项目资源目录过滤； --&gt;
        &lt;resources&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/webapp&lt;/directory&gt;
                &lt;filtering&gt;false&lt;/filtering&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/resources&lt;/directory&gt;
                &lt;filtering&gt;true&lt;/filtering&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/java&lt;/directory&gt;
                &lt;includes&gt;
                    &lt;include&gt;**/*.xml&lt;/include&gt;
                &lt;/includes&gt;
            &lt;/resource&gt;
        &lt;/resources&gt;
    &lt;/build&gt;

   &lt;!--  指定项目当前的application文件--&gt;
    &lt;profiles&gt;
        &lt;profile&gt;
            &lt;id&gt;local&lt;/id&gt;
            &lt;properties&gt;
                &lt;spring.active&gt;local&lt;/spring.active&gt;
            &lt;/properties&gt;
            &lt;activation&gt;
                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
            &lt;/activation&gt;
        &lt;/profile&gt;
        &lt;profile&gt;
            &lt;id&gt;dev&lt;/id&gt;
            &lt;properties&gt;
                &lt;spring.active&gt;dev&lt;/spring.active&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
    &lt;/profiles&gt;
</code></pre>
<p>第二步、配置基础模块base的pom.xml文件：</p>
<pre><code> &lt;!—所有依赖的版本参数控制--&gt;
    &lt;properties&gt;
       &lt;kaptcha.version&gt;2.3.2&lt;/kaptcha.version&gt;
        &lt;oshi.version&gt;3.9.1&lt;/oshi.version&gt;
        &lt;mysql.version&gt;8.0.19&lt;/mysql.version&gt;
        &lt;fastjson.version&gt;1.2.62&lt;/fastjson.version&gt;
        &lt;hutool.version&gt;5.2.4&lt;/hutool.version&gt;
        &lt;common-lang3.version&gt;3.9&lt;/common-lang3.version&gt;
        &lt;commons-collections4.version&gt;4.4&lt;/commons-collections4.version&gt;
  &lt;commons-codec.version&gt;1.4&lt;/commons-codec.version&gt;
        &lt;commons-email.version&gt;1.5&lt;/commons-email.version&gt;
        &lt;guava.version&gt;28.2-jre&lt;/guava.version&gt;
        &lt;redis-client.version&gt;3.2.0&lt;/redis-client.version&gt;
        &lt;lombok.version&gt;1.18.12&lt;/lombok.version&gt;
        &lt;mybatis-plus.version&gt;3.3.0&lt;/mybatis-plus.version&gt;
        &lt;druid.version&gt;1.1.21&lt;/druid.version&gt;
        &lt;beetl.version&gt;3.0.20.RELEASE&lt;/beetl.version&gt;
        &lt;pinyin4j.version&gt;2.5.1&lt;/pinyin4j.version&gt;
        &lt;logback.version&gt;1.2.3&lt;/logback.version&gt;
        &lt;jjwt.version&gt;0.9.1&lt;/jjwt.version&gt;
    &lt;/properties&gt;

  &lt;!--所有项目依赖--&gt;
    &lt;dependencies&gt;
        &lt;!--验证码--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.github.penggle&lt;/groupId&gt;
            &lt;artifactId&gt;kaptcha&lt;/artifactId&gt;
            &lt;version&gt;${kaptcha.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 获取系统信息 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.github.oshi&lt;/groupId&gt;
            &lt;artifactId&gt;oshi-core&lt;/artifactId&gt;
            &lt;version&gt;${oshi.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!--spring boot依赖--&gt;
        &lt;dependency&gt;
  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
        &lt;!--数据库驱动--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;mysql&lt;/groupId&gt;
            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
     &lt;version&gt;${mysql.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- JSON 处理工具 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
            &lt;version&gt;${fastjson.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!--工具类--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.hutool&lt;/groupId&gt;
            &lt;artifactId&gt;hutool-core&lt;/artifactId&gt;
            &lt;version&gt;${hutool.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 日常工具 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;
            &lt;version&gt;${common-lang3.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 数据结构工具 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
            &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;
            &lt;version&gt;${commons-collections4.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 编解码工具 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;commons-codec&lt;/groupId&gt;
&lt;artifactId&gt;commons-codec&lt;/artifactId&gt;
            &lt;version&gt;${commons-codec.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 电子邮件工具 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
            &lt;artifactId&gt;commons-email&lt;/artifactId&gt;
            &lt;version&gt;${commons-email.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- guava工具 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.google.guava&lt;/groupId&gt;
            &lt;artifactId&gt;guava&lt;/artifactId&gt;
            &lt;version&gt;${guava.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 引入 redis 的依赖 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;redis.clients&lt;/groupId&gt;
            &lt;artifactId&gt;jedis&lt;/artifactId&gt;
            &lt;version&gt;${redis-client.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!--自动代码注入和日志--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
    &lt;version&gt;${lombok.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 引入MybatisPlus的依赖--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
            &lt;version&gt;${mybatis-plus.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 引入连接池Druid的依赖--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
            &lt;artifactId&gt;druid&lt;/artifactId&gt;
            &lt;version&gt;${druid.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!--beetl模板引擎--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.ibeetl&lt;/groupId&gt;
            &lt;artifactId&gt;beetl&lt;/artifactId&gt;
            &lt;version&gt;${beetl.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 中文拼音转换--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.belerweb&lt;/groupId&gt;
            &lt;artifactId&gt;pinyin4j&lt;/artifactId&gt;
            &lt;version&gt;${pinyin4j.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 日志组件--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
  &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
            &lt;version&gt;${logback.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
            &lt;artifactId&gt;logback-core&lt;/artifactId&gt;
            &lt;version&gt;${logback.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!--jwt token认证--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;
            &lt;artifactId&gt;jjwt&lt;/artifactId&gt;
            &lt;version&gt;${jjwt.version}&lt;/version&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;

&lt;!-- 指定模块打包名称 --&gt;
    &lt;build&gt;
        &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;
    &lt;/build&gt;
</code></pre>
<p>第三步、配置权限模块(auth)的pom.xml文件：</p>
<pre><code>&lt;dependencies&gt;
        &lt;!-- 项目公共基础包 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.1daoyun&lt;/groupId&gt;
            &lt;artifactId&gt;common-platform-base&lt;/artifactId&gt;
            &lt;version&gt;1.0.0&lt;/version&gt;
  &lt;/dependency&gt;
    &lt;/dependencies&gt;
 &lt;build&gt;
        &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;
    &lt;/build&gt;
</code></pre>
<p>第四步、配置系统模块的pom.xml文件<br>
···<br>
<dependencies><br>
<!-- 项目公共基础包 --><br>
<dependency><br>
<groupId>com.1daoyun</groupId><br>
<artifactId>common-platform-base</artifactId><br>
<version>1.0.0</version><br>
</dependency></p>
<pre><code>    &lt;!-- 项目权限管理包 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.1daoyun&lt;/groupId&gt;
        &lt;artifactId&gt;common-platform-auth&lt;/artifactId&gt;
        &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;/dependency&gt;

&lt;/dependencies&gt;
&lt;build&gt;
    &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;
&lt;/build&gt;
···
</code></pre>
<p>第五步、配置应用模块的pom.xml文件：<br>
···<br>
<dependencies></p>
<!-- 项目系统管理包 -->
<pre><code>    &lt;dependency&gt;
        &lt;groupId&gt;com.1daoyun&lt;/groupId&gt;
        &lt;artifactId&gt;common-platform-sys&lt;/artifactId&gt;
        &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
 &lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
            &lt;configuration&gt;
                &lt;fork&gt;true&lt;/fork&gt;&lt;!-- 如果没有该项配置，devtools不会起作用，即应用不会restart --&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
<p>···</p>
<p>到此通用后台管理任务的基础聚合工程搭建完成</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[通用后台管理系统--创建代码自动生成]]></title>
        <id>https://99732131.github.io/post/tong-yong-hou-tai-guan-li-xi-tong-chuang-jian-dai-ma-zi-dong-sheng-cheng/</id>
        <link href="https://99732131.github.io/post/tong-yong-hou-tai-guan-li-xi-tong-chuang-jian-dai-ma-zi-dong-sheng-cheng/">
        </link>
        <updated>2020-09-09T08:47:44.000Z</updated>
        <content type="html"><![CDATA[<p>如图创建相关文件，一般在MysqlGenerator文件中会自动生成代码，一般不需要自己输入<br>
<img src="https://99732131.github.io/post-images/1599642163179.PNG" alt="" loading="lazy"></p>
<p>第一步、在项目pom.xml文件中添加相关依赖</p>
<pre><code>&lt;dependency&gt;
   &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
   &lt;artifactId&gt;lombok&lt;/artifactId&gt;
   &lt;version&gt;1.18.12&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;

   &lt;groupId&gt;mysql&lt;/groupId&gt;
   &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
   &lt;version&gt;8.0.19&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
   &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
   &lt;artifactId&gt;druid&lt;/artifactId&gt;
   &lt;version&gt;1.1.21&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
   &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
   &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
   &lt;version&gt;3.3.0&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
   &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
   &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;
   &lt;version&gt;3.3.0&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
   &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
   &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;
   &lt;version&gt;2.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>第二步、创建代码生成配置类：</p>
<p>package com.example.demo;</p>
<p>import com.baomidou.mybatisplus.annotation.DbType;<br>
import com.baomidou.mybatisplus.annotation.FieldFill;<br>
import com.baomidou.mybatisplus.generator.AutoGenerator;<br>
import com.baomidou.mybatisplus.generator.InjectionConfig;<br>
import com.baomidou.mybatisplus.generator.config.*;<br>
import com.baomidou.mybatisplus.generator.config.po.TableFill;<br>
import com.baomidou.mybatisplus.generator.config.po.TableInfo;<br>
import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;<br>
import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</p>
<p>import java.util.*;<br>
public class MysqlGenerator {</p>
<pre><code>public static int scanner() {
    Scanner scanner = new Scanner(System.in);
    StringBuilder help = new StringBuilder();
    help.append(&quot; ！！代码生成, 输入 0 表示使用 Velocity 引擎 ！！&quot;);
    help.append(&quot;\n对照表：&quot;);
    help.append(&quot;\n0 = Velocity 引擎&quot;);
    help.append(&quot;\n1 = Freemarker 引擎&quot;);
    help.append(&quot;\n请输入：&quot;);
    System.out.println(help.toString());
    int slt = 0;
    // 现在有输入数据
    if (scanner.hasNext()) {
</code></pre>
<p>String ipt = scanner.next();<br>
if (&quot;1&quot;.equals(ipt)) {<br>
slt = 1;<br>
}<br>
}<br>
return slt;<br>
}</p>
<pre><code>public static void main(String[] args) {
    int result = scanner();
    // 自定义需要填充的字段
    List&lt;TableFill&gt; tableFillList = new ArrayList&lt;TableFill&gt;();
    tableFillList.add(new TableFill(&quot;create_user&quot;, FieldFill.INSERT));
    tableFillList.add(new TableFill(&quot;update_user&quot;, FieldFill.UPDATE));
    tableFillList.add(new TableFill(&quot;create_time&quot;, FieldFill.INSERT));
    tableFillList.add(new TableFill(&quot;update_time&quot;, FieldFill.UPDATE));

    // 代码生成器
    AutoGenerator mpg = new AutoGenerator().setGlobalConfig(
            // 全局配置
            new GlobalConfig()
                    .setOutputDir(&quot;F:\\&quot;)//输出目录(输入你想要的目录)
                    .setFileOverride(true)// 是否覆盖文件
                    .setActiveRecord(true)// 开启 activeRecord 模式
                    .setEnableCache(false)// XML 二级缓存
                    .setBaseResultMap(true)// XML ResultMap
                    .setBaseColumnList(true)// XML columList
                    //.setKotlin(true) 是否生成 kotlin 代码
                    //.setAuthor(&quot;administrator&quot;)
 // 自定义文件命名，注意 %s 会自动填充表实体属性！
                    //.setEntityName(&quot;%sEntity&quot;)
                    .setMapperName(&quot;%sMapper&quot;)
                    .setXmlName(&quot;%sMapper&quot;)
                    .setServiceName(&quot;%sService&quot;)
                    .setServiceImplName(&quot;%sServiceImpl&quot;)
                    .setControllerName(&quot;%sController&quot;)
    ).setDataSource(
            // 数据源配置
            new DataSourceConfig()
                    .setDbType(DbType.MYSQL)// 数据库类型
                    //.setTypeConvert(new MySqlTypeConvert() {
                    //    // 自定义数据库表字段类型转换【可选】
                    //    @Override
                    //    public DbColumnType processTypeConvert(GlobalConfig globalConfig, String fieldType) {
                    //        System.out.println(&quot;转换类型：&quot; + fieldType);
                    //        // if ( fieldType.toLowerCase().contains( &quot;tinyint&quot; ) ) {
                    //        //    return DbColumnType.BOOLEAN;
                    //        // }
                    //        return super.processTypeConvert(globalConfig, fieldType);
                    //    }
                    //})
                    .setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;)
                    .setUsername(&quot;root&quot;)
                    .setPassword(&quot;123456&quot;)
                    .setUrl(&quot;jdbc:mysql://localhost:3306/platform?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;useSSL=false&amp;serverTimezone=UTC&quot;)
</code></pre>
<p>).setPackageInfo(<br>
// 包配置<br>
new PackageConfig()<br>
.setModuleName(&quot;system&quot;)<br>
.setParent(&quot;com.common.platform.sys.modular&quot;)// 自定义包路径<br>
.setController(&quot;controller&quot;)// 这里是控制器包名，默认 web<br>
).setCfg(<br>
// 注入自定义配置，可以在 VM 中使用 cfg.abc 设置的值<br>
new InjectionConfig() {<br>
@Override<br>
public void initMap() {<br>
Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();<br>
map.put(&quot;abc&quot;, this.getConfig().getGlobalConfig().getAuthor() + &quot;-mp&quot;);<br>
this.setMap(map);<br>
}<br>
}.setFileOutConfigList(Collections.<FileOutConfig>singletonList(new FileOutConfig(<br>
&quot;/templates/mapper.xml&quot; + ((1 == result) ? &quot;.ftl&quot; : &quot;.vm&quot;)) {<br>
// 自定义输出文件目录<br>
@Override<br>
public String outputFile(TableInfo tableInfo) {<br>
return &quot;F:/mapping/&quot; + tableInfo.getEntityName() + &quot;Mapper.xml&quot;;<br>
}<br>
}))<br>
).setTemplate(<br>
// 关闭默认 xml 生成，调整生成 至 根目录<br>
new TemplateConfig().setXml(null)<br>
// 自定义模板配置，模板可以参考源码 /mybatis-plus/src/main/resources/template 使用 copy<br>
// 至您项目 src/main/resources/template 目录下，模板名称也可自定义如下配置：<br>
// .setController(&quot;...&quot;);<br>
// .setEntity(&quot;...&quot;);<br>
// .setMapper(&quot;...&quot;);<br>
// .setXml(&quot;...&quot;);<br>
// .setService(&quot;...&quot;);<br>
// .setServiceImpl(&quot;...&quot;);<br>
);<br>
StrategyConfig strategyConfig = new StrategyConfig();<br>
strategyConfig<br>
.setEntityTableFieldAnnotationEnable(true)<br>
// 【实体】是否为lombok模型（默认 false）<a href="https://projectlombok.org/">document</a><br>
.setEntityLombokModel(true)<br>
// .setCapitalMode(true)// 全局大写命名<br>
// .setDbColumnUnderline(true)//全局下划线命名<br>
.setTablePrefix(&quot;sys_&quot;)// 此处可以修改为您的表前缀<br>
.setNaming(NamingStrategy.underline_to_camel)// 表名生成策略<br>
//系统表&quot;sys_dept&quot;,&quot;sys_dict&quot;,&quot;sys_dict_type&quot;,&quot;sys_file_info&quot;,&quot;sys_login_log&quot;,&quot;sys_menu&quot;,&quot;sys_operation_log&quot;,&quot;sys_position&quot;,&quot;sys_relation&quot;,&quot;sys_role&quot;,&quot;sys_user&quot;,&quot;sys_user_pos&quot;<br>
//配置表&quot;sys_config&quot;<br>
.setInclude(&quot;sys_dept&quot;,&quot;sys_dict&quot;,&quot;sys_dict_type&quot;,&quot;sys_file_info&quot;,&quot;sys_login_log&quot;,&quot;sys_menu&quot;,&quot;sys_operation_log&quot;,&quot;sys_position&quot;,&quot;sys_relation&quot;,&quot;sys_role&quot;,&quot;sys_user&quot;,&quot;sys_user_pos&quot;) // 需要生成的表<br>
// .setExclude(&quot;sys_config&quot;) // 排除生成的表<br>
// 自定义实体父类<br>
.setSuperEntityClass(&quot;com.common.platform.sys.base.pojo.BaseEntity&quot;)<br>
// 自定义实体，公共字段<br>
.setSuperEntityColumns(&quot;create_time&quot;, &quot;update_time&quot;, &quot;create_user&quot;, &quot;update_user&quot;)<br>
//.setTableFillList(tableFillList)<br>
// 自定义 mapper 父类<br>
// .setSuperMapperClass(&quot;com.baomidou.demo.TestMapper&quot;)<br>
// 自定义 service 父类<br>
// .setSuperServiceClass(&quot;com.baomidou.demo.TestService&quot;)<br>
// 自定义 service 实现类父类<br>
// .setSuperServiceImplClass(&quot;com.baomidou.demo.TestServiceImpl&quot;)<br>
// 自定义 controller 父类<br>
.setSuperControllerClass(&quot;com.common.platform.sys.base.controller.BaseController&quot;)<br>
// 【实体】是否生成字段常量（默认 false）<br>
// public static final String ID = &quot;test_id&quot;;<br>
// .setEntityColumnConstant(true)<br>
// 【实体】是否为构建者模型（默认 false）<br>
// public User setName(String name) {this.name = name; return this;}<br>
// .setEntityBuilderModel(true)<br>
// Boolean类型字段是否移除is前缀处理<br>
// .setEntityBooleanColumnRemoveIsPrefix(true)<br>
// .setRestControllerStyle(true)<br>
// .setControllerMappingHyphenStyle(true)<br>
;<br>
mpg.setStrategy(strategyConfig);</p>
<p>最后你会在你所设置的目录中找到你所要的文件<br>
<img src="https://99732131.github.io/post-images/1599648405410.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Spring boot中创建业务相关类]]></title>
        <id>https://99732131.github.io/post/zai-spring-boot-zhong-chuang-jian-ye-wu-xiang-guan-lei/</id>
        <link href="https://99732131.github.io/post/zai-spring-boot-zhong-chuang-jian-ye-wu-xiang-guan-lei/">
        </link>
        <updated>2020-09-08T07:36:24.000Z</updated>
        <content type="html"><![CDATA[<p>任务描述：<br>
创建系统用户实体类；<br>
创建系统用户持久层；<br>
创建系统用户业务层；<br>
创建系统用户控制层；</p>
<p>第一步、创建系统用户实体类：<br>
<img src="https://99732131.github.io/post-images/1599550944260.PNG" alt="" loading="lazy"></p>
<p>@Data<br>
public class SysUser {</p>
<pre><code>private Long id;
private String userName;
private String passWord;
private Date createTime;
private Integer userAge;
private String remark;
</code></pre>
<p>}</p>
<p>第二步、创建系统用户持久层；<br>
<img src="https://99732131.github.io/post-images/1599550856784.PNG" alt="" loading="lazy"></p>
<p>@Mapper<br>
public interface SysUserDao extends BaseMapper<SysUser> {<br>
}</p>
<p>第三步、创建系统用户业务层；<br>
<img src="https://99732131.github.io/post-images/1599551240006.PNG" alt="" loading="lazy"><br>
public interface SysUserService {<br>
}</p>
<p><img src="https://99732131.github.io/post-images/1599551244564.PNG" alt="" loading="lazy"><br>
@Service<br>
public class SysUserServiceimpl extends ServiceImpl&lt;SysUserMapper, SysUser&gt; implements SysUserService {<br>
}</p>
<p>第四步、创建系统用户控制层；<br>
<img src="https://99732131.github.io/post-images/1599551347101.PNG" alt="" loading="lazy"><br>
package com.example.demo.controller;</p>
<p>import com.example.demo.entity.SysUser;<br>
import com.example.demo.service.SysUserService;<br>
import org.springframework.beans.factory.annotation.Autowired;<br>
import org.springframework.web.bind.annotation.*;</p>
<p>import java.util.Date;<br>
import java.util.List;</p>
<p>@RestController<br>
public class SysUserController {</p>
<pre><code>@Autowired
private SysUserService sysUserService;

@GetMapping(&quot;/&quot;)
public String  index() {
    return &quot;欢迎访问&quot;;
}

@GetMapping(&quot;/getUser&quot;)
public SysUser getUser(Long id){
    return sysUserService.getById(id);

}

@PostMapping(&quot;/addUser&quot;)
public String addUser(SysUser sysUser){
    sysUser.setCreateTime(new Date());
    return sysUserService.save(sysUser)?&quot;保存成功&quot;:&quot;保存失败&quot;;
}

@PutMapping(&quot;/updateUser&quot;)
public String updateUser(SysUser sysUser){
    return sysUserService.updateById(sysUser)?&quot;修改成功&quot;:&quot;保存失败&quot;;
}

@GetMapping(&quot;/list&quot;)
public List&lt;SysUser&gt; list(){

     return sysUserService.list();
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://99732131.github.io/post/hello-gridea/</id>
        <link href="https://99732131.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>